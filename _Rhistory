ggplot(data = y_, aes(x = x_)) + geom_tile(aes(fill = value)) +
geom_line(aes(y=y_true), colour="red") +
geom_line(aes(y=y_pred), colour="blue")
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="red") +
geom_line(aes(y=y_pred), colour="blue")
y_true <- test$speed[2:nrow(y_), ]
y_pred <- test$speed[1:nrow(y_)-1, ]
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1, ]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8254
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="red") +
geom_line(aes(y=y_pred), colour="blue")
# time series plot(use (t-1) to be prediction)
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="red") +
geom_line(aes(y=y_pred), colour="blue")
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=100)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8254
# scatter plot(pred v.s true)
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
p + geom_point() +
geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep=""))
# time series plot(pred v.s true)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="FF6699") +
geom_line(aes(y=y_pred), colour="blue")
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="blue")
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#009FCC")
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#AA0000") +
geom_line(aes(y=y_pred), colour="#009FCC")
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC")
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=300)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8254
# scatter plot(pred v.s true)
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
p + geom_point() +
geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep=""))
# time series plot(pred v.s true)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC")
rf <- randomForest(speed ~ ., data=train, ntree=100)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
mse <- mean( (y_true - y_pred)^2 ) # mse=14.1108
# scatter plot(pred v.s true)
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
p + geom_point() +
geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep=""))
# time series plot(pred v.s true)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC")
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
mse <- mean( (y_true - y_pred)^2 ) # mse=14.1108
# scatter plot(pred v.s true)
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
p + geom_point() +
geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep=""))
# time series plot(pred v.s true)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC")
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
p + geom_point() +
geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep=""))
# time series plot(pred v.s true)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC")
}
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
plooot(y_true, y_pred)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
p + geom_point() +
geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep=""))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC"))
}
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
plooot(y_true, y_pred)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC"))
}
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
plooot(y_true, y_pred)
plooot(y_true, y_pred)
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
# package
set.seed(1234)
library(randomForest)
library(miscTools)
library(ggplot2)
# function
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=2) +
geom_line(aes(y=y_pred), colour="#4400CC"))
}
# import dataset
df <- read.csv("C:/Users/stat_pc/Desktop/code/etc/M0405.csv")
# find station which we concern
df1 <- df[df$s_stat == "01F0750S", 7:9]
df2 <- df[df$s_stat == "01F0880S", 7:9]
df3 <- df[df$s_stat == "01F0928S", 7:9]
# use info of last, self and next station
df <- data.frame(cbind(df1,df2,df3,df2$speed))
colnames(df) <- c("last_c","last_n","last_s","_c","_n","_s","next_c","next_n","next_s","speed")
rm(df1, df2, df3)
# X, y <- use row_data at (t-1) to predict row_data (t)
X <- df[1:2591, 1:9]
y <- data.frame(df[2:2592, 10])
colnames(y) <- c("speed")
df <- data.frame(cbind(X, y))
# train & test
train_test <- as.integer(nrow(X)*0.8)
train <- df[1:train_test, ]
test <- df[train_test:nrow(df), ]
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
# time series plot(use (t-1) to be prediction)
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
plooot(y_true, y_pred)
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
# function
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.2) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.2))
}
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
# time series plot(use (t-1) to be prediction)
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.05) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.05))
}
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
y_true <- test$speed[2:nrow(y_)]
y_pred <- test$speed[1:nrow(y_)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
# time series plot(use (t-1) to be prediction)
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
# package
set.seed(1234)
library(randomForest)
library(miscTools)
library(ggplot2)
# function
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.01) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.01))
}
# import dataset
df <- read.csv("C:/Users/stat_pc/Desktop/code/etc/M0405.csv")
# find station which we concern
df1 <- df[df$s_stat == "01F0750S", 7:9]
df2 <- df[df$s_stat == "01F0880S", 7:9]
df3 <- df[df$s_stat == "01F0928S", 7:9]
# use info of last, self and next station
df <- data.frame(cbind(df1,df2,df3,df2$speed))
colnames(df) <- c("last_c","last_n","last_s","_c","_n","_s","next_c","next_n","next_s","speed")
rm(df1, df2, df3)
# X, y <- use row_data at (t-1) to predict row_data (t)
X <- df[1:2591, 1:9]
y <- data.frame(df[2:2592, 10])
colnames(y) <- c("speed")
df <- data.frame(cbind(X, y))
# train & test
train_test <- as.integer(nrow(X)*0.8)
train <- df[1:train_test, ]
test <- df[train_test:nrow(df), ]
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
# time series plot(use (t-1) to be prediction)
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
r2
# function
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
#  x_ <- 1:nrow(y_)
x_ <- 300:400
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.01) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.01))
}
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
# time series plot(use (t-1) to be prediction) BASIC
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.01) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.01))
}
# time series plot(use (t-1) to be prediction) BASIC
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.001) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.001))
}
# time series plot(use (t-1) to be prediction) BASIC
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=0.8) +
geom_line(aes(y=y_pred), colour="#4400CC", size=0.8))
}
# time series plot(use (t-1) to be prediction) BASIC
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
plooot <- function(y_true, y_pred){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC"))
}
# time series plot(use (t-1) to be prediction) BASIC
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred)
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699", size=1.01) +
geom_line(aes(y=y_pred), colour="#4400CC", size=1.01))
# random forest regression
rf <- randomForest(speed ~ ., data=train, ntree=500)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred)
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC") +
coord_cartesian(xlim = c(300, 400)))
plooot <- function(y_true, y_pred, xlim1, xlim2){
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=y_true, pred=y_pred))
print (p + geom_point() + geom_abline(color="red") +
ggtitle(paste("RandomForest Regression in R r^2=", r2, sep="")))
y_ <- data.frame(cbind(y_true, y_pred))
x_ <- 1:nrow(y_)
print (ggplot(data = y_, aes(x = x_)) +
geom_line(aes(y=y_true), colour="#FF6699") +
geom_line(aes(y=y_pred), colour="#4400CC") +
coord_cartesian(xlim = c(xlim1, xlim2)))
}
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred, 0, 520)
plooot(y_true, y_pred, 300, 400)
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred, 0, 520)
y_true <- test$speed
y_pred <- predict(rf, test[,1:9])
r2 <- rSquared(y_true, y_true - y_pred)
mse <- mean( (y_true - y_pred)^2 ) # mse=13.8668
# scatter plot(pred v.s true)
plooot(y_true, y_pred, 0, 520)
# zoom in
plooot(y_true, y_pred, 300, 400)
y_true <- test$speed[2:nrow(test)]
y_pred <- test$speed[1:nrow(test)-1]
mse <- mean( (y_true - y_pred)^2 ) # mse=17.0751
r2 <- rSquared(y_true, y_true - y_pred)
plooot(y_true, y_pred, 0, 520)
View(X)
# package
library("ggplot2")
set.seed(1234)
# import dataset
df <- read.csv("C:/Users/stat_pc/Desktop/code/etc/M0405.csv")
df_ <- df[df$s_stat == "01F0880S", ]
# time series
x_ <- 1:nrow(df_)
ggplot(aes(x = x_, y = speed), data = df_) + geom_line()
# kmeans
X <- cbind(df_$clock, df_$number, df_$speed)
kmeans.result <- kmeans(X,5)
kmeans.result
plot(X, col=kmeans.result$cluster)
# pca
x_pca <- prcomp(X, center=TRUE, scale.=TRUE)
x_pca
screeplot(x_pca, type="lines",col=3)
plot(x_pca$x, col=kmeans.result$cluster)
# plot label of kmeans
x_kmeans <- data.frame(cbind(df_$speed, kmeans.result$cluster))
df_ <- x_kmeans[x_kmeans$X2 == "1", ]
x_ <- 1:nrow(df_)
ggplot(aes(x = x_, y = X1), data = df_) + geom_line()
for (i in c(1,2,3,4,5)){
df_ <- x_kmeans[x_kmeans$X2 == i, ]
x_ <- 1:nrow(df_)
print (ggplot(aes(x = x_, y = X1), data = df_) + geom_line())
}
